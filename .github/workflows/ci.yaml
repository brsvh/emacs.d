name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_call:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-flake:
    name: Check flake
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: nixbuild/nix-quick-install-action@v26
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: ${{ runner.os }}-nix-${{ hashFiles('**/*.nix') }}
          restore-prefixes-first-match: ${{ runner.os }}-nix-
          purge: true
          purge-created: 604800

      - name: Check flake
        run: nix flake check

  check-dependencies:
    name: Check dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: nixbuild/nix-quick-install-action@v26
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: ${{ runner.os }}-nix-${{ hashFiles('**/*.nix') }}
          restore-prefixes-first-match: ${{ runner.os }}-nix-
          purge: true
          purge-created: 604800

      - name: Check package dependencies
        run: nix build .#emacsD.depsCheck --print-build-logs

  build-nogui:
    name: Build nogui packages
    needs: [check-flake, check-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: nixbuild/nix-quick-install-action@v26
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: ${{ runner.os }}-build-${{ hashFiles('**/*.nix') }}
          restore-prefixes-first-match: ${{ runner.os }}-build-
          purge: true
          purge-created: 604800

      - name: Build
        run: nix build .#emacsD-nogui --print-build-logs

      - name: Setup cachix
        env:
          CACHIX_AUTH_TOKEN: "${{ secrets.CACHIX_AUTH_TOKEN }}"
        run: nix profile install nixpkgs#cachix

      - name: Publish
        if: github.ref == 'refs/heads/main'
        env:
          CACHIX_AUTH_TOKEN: "${{ secrets.CACHIX_AUTH_TOKEN }}"
        run: cachix push brsvh ./result

  build-pgtk:
    name: Build pgtk packages
    needs: [check-flake, check-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: nixbuild/nix-quick-install-action@v26
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: ${{ runner.os }}-build-${{ hashFiles('**/*.nix') }}
          restore-prefixes-first-match: ${{ runner.os }}-nix-
          purge: true
          purge-created: 604800

      - name: Build
        run: nix build .#emacsD-pgtk --print-build-logs

      - name: Setup cachix
        env:
          CACHIX_AUTH_TOKEN: "${{ secrets.CACHIX_AUTH_TOKEN }}"
        run: nix profile install nixpkgs#cachix

      - name: Publish
        if: github.ref == 'refs/heads/main'
        env:
          CACHIX_AUTH_TOKEN: "${{ secrets.CACHIX_AUTH_TOKEN }}"
        run: cachix push brsvh ./result

  build-x11:
    needs: [check-flake, check-dependencies]
    name: Build x11 packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: nixbuild/nix-quick-install-action@v26
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: ${{ runner.os }}-build-${{ hashFiles('**/*.nix') }}
          restore-prefixes-first-match: ${{ runner.os }}-nix-
          purge: true
          purge-created: 604800

      - name: Build
        run: nix build .#emacsD --print-build-logs

      - name: Setup cachix
        env:
          CACHIX_AUTH_TOKEN: "${{ secrets.CACHIX_AUTH_TOKEN }}"
        run: nix profile install nixpkgs#cachix

      - name: Publish
        if: github.ref == 'refs/heads/main'
        env:
          CACHIX_AUTH_TOKEN: "${{ secrets.CACHIX_AUTH_TOKEN }}"
        run: cachix push brsvh ./result

  export-org-to-md:
    needs: [build-nogui]
    name: Export Org files to Markdown
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Nix
        uses: nixbuild/nix-quick-install-action@v26
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Nix Store
        uses: nix-community/cache-nix-action@v5
        with:
          primary-key: ${{ runner.os }}-build-${{ hashFiles('**/*.nix') }}
          restore-prefixes-first-match: ${{ runner.os }}-build-
          purge: true
          purge-created: 604800

      - name: Checkout docs changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: shell
          filters: |
            org:
              - 'org/*.org'

      - name: Export to Markdown
        id: export
        if: steps.changes.outputs.org == 'true'
        run: |
          for org in ${{ steps.changes.outputs.org_files }}
          do
             nix run .#batch -- $org --funcall org-md-export-to-markdown
          done

      - name: Auto commit
        if: steps.export.outcome == 'success'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch --all
          git checkout -b auto-commit
          git add **/*.md
          git commit -m "docs: auto update docs"
          git push -v origin auto-commit\:main
